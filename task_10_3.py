''' Осуществить программу работы с органическими клетками, состоящими из ячеек. Необходимо создать класс «Клетка».
В его конструкторе инициализировать параметр, соответствующий количеству ячеек клетки (целое число).
В классе должны быть реализованы методы перегрузки арифметических операторов: сложение (__add__()),
вычитание (__sub__()), умножение (__mul__()), деление (__floordiv__, __truediv__()).
Эти методы должны применяться только к клеткам и выполнять увеличение, уменьшение, умножение и округление
до целого числа деления клеток, соответственно.
-Сложение. Объединение двух клеток. При этом число ячеек общей клетки должно равняться сумме ячеек исходных двух клеток.
-Вычитание. Участвуют две клетки. Операцию необходимо выполнять, только если разность количества ячеек двух клеток
    больше нуля, иначе выводить соответствующее сообщение.
-Умножение. Создаётся общая клетка из двух. Число ячеек общей клетки — произведение количества ячеек этих двух клеток.
-Деление. Создаётся общая клетка из двух. Число ячеек общей клетки определяется как целочисленное деление
    количества ячеек этих двух клеток.
В классе необходимо реализовать метод make_order(), принимающий экземпляр класса и количество ячеек в ряду.
Этот метод позволяет организовать ячейки по рядам.
Метод должен возвращать строку вида *****\n*****\n*****..., где количество ячеек между \n равно переданному аргументу.
Если ячеек на формирование ряда не хватает, то в последний ряд записываются все оставшиеся.
Например, количество ячеек клетки равняется 12, а количество ячеек в ряду — 5.
В этом случае метод make_order() вернёт строку: *****\n*****\n**.
Или, количество ячеек клетки — 15, а количество ячеек в ряду равняется 5.
Тогда метод make_order() вернёт строку: *****\n*****\n*****.'''


class Cell:
    def __init__(self, size):
        self.size = size

    def __str__(self):
        return f'количество ячеек {self.size}'

    def __add__(self, other):
        self.size += other.size
        return self

    def __sub__(self, other):
        if self.size < other.size:
            return f'размер вычитаемой клетки не может превышать {self.size}'
        else:
            self.size -= other.size
        return self

    def __mul__(self, other):
        self.size *= other.size
        return self

    def __truediv__(self, other):
        if other.size > 0:
            self.size = self.size // other.size
        else:
            return 'число должно быть > 0'
        return self

    def make_order(self, n):
        x = self.size
        while x > 0:
            for _ in range(1, n + 1):
                print('*', end='')
                x -= 1
                if x <= 0:
                    break
            print('\n', end='')


a = Cell(10)
b = Cell(15)
c = Cell(20)
d = Cell(25)

print(a + b)
print(a - b)
print(a * b)
print(c / d)

a.make_order(6)
b.make_order(5)
